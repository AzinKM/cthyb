/*******************************************************************************
 *
 * TRIQS: a Toolbox for Research in Interacting Quantum Systems
 *
 * Copyright (C) 2013 by I. Krivenko, M. Ferrero, O. Parcollet
 *
 * TRIQS is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * TRIQS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * TRIQS. If not, see <http://www.gnu.org/licenses/>.
 *
 ******************************************************************************/
#ifndef TRIQS_CTQMC_KRYLOV_HILBERT_SPACE
#define TRIQS_CTQMC_KRYLOV_HILBERT_SPACE

#include <triqs/utility/exceptions.hpp>
#include "fundamental_operator_set.hpp"
#include "fock_state.hpp"

namespace cthyb_krylov {

// this class describes a *full* Hilbert space spanned
// from all Fock states that can be generated by a given
// set of fundamental operators
class complete_hilbert_space {

  public:

  // default constructor
  complete_hilbert_space(): dim(0) {}

  // construct full complete_hilbert_space for a given basis
  complete_hilbert_space(fundamental_operator_set const & fops): dim(fops.dimension()) {}

  // value
  complete_hilbert_space(complete_hilbert_space const &) = default;
  complete_hilbert_space & operator = (complete_hilbert_space const &) = default;

  // return size of the hilbert space
  size_t dimension() const { return dim; }

  // find the index of a given fock state
  size_t get_state_index(fock_state const & f) const {
    if (f >= dim) TRIQS_RUNTIME_ERROR << "this index is too big";
    return f;
  }

  // return the i^th basis element as a fock state
  fock_state get_fock_state(size_t i) const {
    if (i >= dim) TRIQS_RUNTIME_ERROR << "this fock state doesn't exist (index too big)";
    return fock_state(i);
  }

  private:

  // the dimension
  size_t dim;

};

}
#endif
